/* LOG4KMW_LOGGERS.CPP 
   CREATED Wed Mar 23 11:06:51 2016

   GENERATED BY logspec2cpp VERSION 0.3 (c) Krauss-Maffei-Wegmann GmbH & Co. KG. 
   THIS IS A GENERATED FILE. DO NOT MODIFY.
*/



#include "log4kmw_records.hpp"
#include "log4kmw_loggers.hpp"

log4kmw::Logger<log4kmw_records::rec_apu_uc_status, log4kmw::persistence::memory_mapped_file> log4kmw_loggers::logger_rec_apu_uc_status;
std::mutex log4kmw_loggers::logger_mutex_rec_apu_uc_status;
log4kmw::Logger<log4kmw_records::rec_apu_cu_status, log4kmw::persistence::memory_mapped_file> log4kmw_loggers::logger_rec_apu_cu_status;
std::mutex log4kmw_loggers::logger_mutex_rec_apu_cu_status;
log4kmw::Logger<log4kmw_records::rec_apu_ecu_status, log4kmw::persistence::memory_mapped_file> log4kmw_loggers::logger_rec_apu_ecu_status;
std::mutex log4kmw_loggers::logger_mutex_rec_apu_ecu_status;
log4kmw::Logger<log4kmw_records::rec_apu_fans_status, log4kmw::persistence::memory_mapped_file> log4kmw_loggers::logger_rec_apu_fans_status;
std::mutex log4kmw_loggers::logger_mutex_rec_apu_fans_status;
log4kmw::Logger<log4kmw_records::rec_fgr, log4kmw::persistence::memory_mapped_file> log4kmw_loggers::logger_rec_fgr;
std::mutex log4kmw_loggers::logger_mutex_rec_fgr;
log4kmw::Logger<log4kmw_records::rec_zm, log4kmw::persistence::memory_mapped_file> log4kmw_loggers::logger_rec_zm;
std::mutex log4kmw_loggers::logger_mutex_rec_zm;
log4kmw::Logger<log4kmw_records::status_all, log4kmw::persistence::memory_mapped_file> log4kmw_loggers::logger_status_all;
std::mutex log4kmw_loggers::logger_mutex_status_all;
log4kmw::Logger<log4kmw_records::rec_vehicle, log4kmw::persistence::memory_mapped_file> log4kmw_loggers::logger_rec_vehicle;
std::mutex log4kmw_loggers::logger_mutex_rec_vehicle;
log4kmw::Logger<log4kmw_records::rec_rfh_status, log4kmw::persistence::memory_mapped_file> log4kmw_loggers::logger_rec_rfh_status;
std::mutex log4kmw_loggers::logger_mutex_rec_rfh_status;
log4kmw::Logger<log4kmw_records::rec_nav_status, log4kmw::persistence::memory_mapped_file> log4kmw_loggers::logger_rec_nav_status;
std::mutex log4kmw_loggers::logger_mutex_rec_nav_status;
 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_CommunicationChanged const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_InternalErrorChanged const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_SelftestErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_SelftestErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_SelftestErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_SelftestErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_SelftestErrorChanged const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_SelftestErrorChanged const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_SelftestErrorChanged const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_SelftestErrorChanged const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_SelftestErrorChanged const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_CU_SelftestErrorChanged const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_CommunicationChanged const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_InternalErrorChanged const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Bottom_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Bottom_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Bottom_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Bottom_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Bottom_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Bottom_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Bottom_CommunicationChanged const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Bottom_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Bottom_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Bottom_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Bottom_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Bottom_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Bottom_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Bottom_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Bottom_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Bottom_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Bottom_InternalErrorChanged const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Bottom_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Bottom_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Bottom_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Top_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Top_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Top_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Top_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Top_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Top_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Top_CommunicationChanged const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Top_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Top_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Top_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Top_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Top_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Top_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Top_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Top_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Top_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Top_InternalErrorChanged const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Top_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Top_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_Fan_Top_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_CommunicationChanged const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_InternalErrorChanged const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_MonitoringStatusChanged const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_MonitoringStatusChanged const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_MonitoringStatusChanged const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_MonitoringStatusChanged const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_MonitoringStatusChanged const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_MonitoringStatusChanged const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_MonitoringStatusChanged const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_MonitoringStatusChanged const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_MonitoringStatusChanged const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_MonitoringStatusChanged const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::BootUp const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::BootUp const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::BootUp const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::BootUp const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::BootUp const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::BootUp const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::BootUp const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::BootUp const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::BootUp const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::BootUp const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN1_Changed const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN1_Changed const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN1_Changed const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN1_Changed const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN1_Changed const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN1_Changed const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN1_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN1_Changed const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN1_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN1_Changed const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN2_Changed const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN2_Changed const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN2_Changed const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN2_Changed const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN2_Changed const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN2_Changed const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN2_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN2_Changed const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN2_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN2_Changed const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_BAG10_Changed const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_BAG10_Changed const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_BAG10_Changed const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_BAG10_Changed const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_BAG10_Changed const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_BAG10_Changed const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_BAG10_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_BAG10_Changed const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_BAG10_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_BAG10_Changed const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_IO_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_IO_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_IO_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_IO_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_IO_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_IO_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_IO_CANStatus_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_IO_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_IO_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_IO_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_IO_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_IO_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_IO_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_IO_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_IO_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_IO_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_IO_InternalError_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_IO_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_IO_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_IO_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PPC_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PPC_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PPC_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PPC_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PPC_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PPC_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PPC_CANStatus_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PPC_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PPC_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PPC_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PPC_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PPC_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PPC_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PPC_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PPC_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PPC_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PPC_InternalError_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PPC_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PPC_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PPC_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PWR_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PWR_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PWR_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PWR_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PWR_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PWR_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PWR_CANStatus_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PWR_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PWR_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PWR_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PWR_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PWR_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PWR_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PWR_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PWR_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PWR_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PWR_InternalError_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PWR_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PWR_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_PWR_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_VT_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_VT_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_VT_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_VT_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_VT_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_VT_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_VT_CANStatus_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_VT_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_VT_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_VT_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_VT_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_VT_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_VT_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_VT_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_VT_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_VT_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_VT_InternalError_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_VT_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_VT_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::FGR_VT_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::IFIS_Status_Changed const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::IFIS_Status_Changed const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::IFIS_Status_Changed const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::IFIS_Status_Changed const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::IFIS_Status_Changed const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::IFIS_Status_Changed const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::IFIS_Status_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::IFIS_Status_Changed const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::IFIS_Status_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::IFIS_Status_Changed const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_StatusChanged const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_StatusChanged const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_StatusChanged const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_StatusChanged const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_StatusChanged const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_StatusChanged const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_StatusChanged const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_StatusChanged const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_StatusChanged const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_StatusChanged const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_DoorStatusChanged const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_DoorStatusChanged const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_DoorStatusChanged const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_DoorStatusChanged const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_DoorStatusChanged const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_DoorStatusChanged const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_DoorStatusChanged const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_DoorStatusChanged const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_DoorStatusChanged const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_DoorStatusChanged const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_Videosignal_Sync_Changed const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_Videosignal_Sync_Changed const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_Videosignal_Sync_Changed const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_Videosignal_Sync_Changed const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_Videosignal_Sync_Changed const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_Videosignal_Sync_Changed const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_Videosignal_Sync_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_Videosignal_Sync_Changed const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_Videosignal_Sync_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_Videosignal_Sync_Changed const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_HS_Changed const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_HS_Changed const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_HS_Changed const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_HS_Changed const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_HS_Changed const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_HS_Changed const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_HS_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_HS_Changed const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_HS_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_HS_Changed const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_MainEngineRunning_Changed const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_MainEngineRunning_Changed const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_MainEngineRunning_Changed const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_MainEngineRunning_Changed const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_MainEngineRunning_Changed const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_MainEngineRunning_Changed const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_MainEngineRunning_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_MainEngineRunning_Changed const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_MainEngineRunning_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_MainEngineRunning_Changed const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_Red_Warnings_Changed const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_Red_Warnings_Changed const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_Red_Warnings_Changed const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_Red_Warnings_Changed const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_Red_Warnings_Changed const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_Red_Warnings_Changed const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_Red_Warnings_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_Red_Warnings_Changed const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_Red_Warnings_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_Red_Warnings_Changed const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_Yellow_Warnings_Changed const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_Yellow_Warnings_Changed const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_Yellow_Warnings_Changed const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_Yellow_Warnings_Changed const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_Yellow_Warnings_Changed const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_Yellow_Warnings_Changed const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_Yellow_Warnings_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_Yellow_Warnings_Changed const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_Yellow_Warnings_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_Yellow_Warnings_Changed const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_high_Voltage const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_high_Voltage const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_high_Voltage const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_high_Voltage const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_high_Voltage const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_high_Voltage const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_high_Voltage const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_high_Voltage const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_high_Voltage const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_high_Voltage const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_low_Voltage const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_low_Voltage const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_low_Voltage const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_low_Voltage const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_low_Voltage const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_low_Voltage const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_low_Voltage const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_low_Voltage const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_low_Voltage const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::Vehicle_low_Voltage const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZLHV_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZLHV_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZLHV_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZLHV_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZLHV_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZLHV_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZLHV_CANStatus_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZLHV_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZLHV_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZLHV_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZM_Entry_Changed const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZM_Entry_Changed const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZM_Entry_Changed const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZM_Entry_Changed const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZM_Entry_Changed const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZM_Entry_Changed const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZM_Entry_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZM_Entry_Changed const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZM_Entry_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZM_Entry_Changed const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZM_UserInteractionSolved const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZM_UserInteractionSolved const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZM_UserInteractionSolved const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZM_UserInteractionSolved const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZM_UserInteractionSolved const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZM_UserInteractionSolved const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZM_UserInteractionSolved const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZM_UserInteractionSolved const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZM_UserInteractionSolved const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZM_UserInteractionSolved const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZWL_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZWL_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZWL_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZWL_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZWL_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZWL_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZWL_CANStatus_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZWL_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZWL_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZWL_CANStatus_Changed const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZWL_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_uc_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZWL_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_apu_cu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_cu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_cu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_cu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZWL_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZWL_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_apu_fans_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_apu_fans_status' invalid (not initialized?)");
 log4kmw_records::rec_apu_fans_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_apu_fans_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZWL_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_fgr_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_fgr' invalid (not initialized?)");
 log4kmw_records::rec_fgr rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_fgr);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZWL_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_zm_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_zm' invalid (not initialized?)");
 log4kmw_records::rec_zm rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_zm);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZWL_InternalError_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZWL_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_vehicle_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_vehicle' invalid (not initialized?)");
 log4kmw_records::rec_vehicle rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_vehicle);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZWL_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ZWL_InternalError_Changed const & ev, log4kmw_loggers::logger_rec_nav_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_nav_status' invalid (not initialized?)");
 log4kmw_records::rec_nav_status rec;
 log4kmw_records::make_record_from_states(rec, ev.id());
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_nav_status);
  log.append(rec);
 }
}

