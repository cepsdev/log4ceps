/* LOG4KMW_LOGGERS.CPP 
   CREATED Wed Nov 25 19:28:32 2015

   GENERATED BY logspec2cpp VERSION 0.3 (c) Krauss-Maffei-Wegmann GmbH & Co. KG. 
   THIS IS A GENERATED FILE. DO NOT MODIFY.
*/



#include "log4kmw_records.hpp"
#include "log4kmw_loggers.hpp"

log4kmw::Logger<log4kmw_records::apu_ecu_status, log4kmw::persistence::memory_mapped_file> log4kmw_loggers::logger_apu_ecu_status;
std::mutex log4kmw_loggers::logger_mutex_apu_ecu_status;
log4kmw::Logger<log4kmw_records::apu_uc_status, log4kmw::persistence::memory_mapped_file> log4kmw_loggers::logger_apu_uc_status;
std::mutex log4kmw_loggers::logger_mutex_apu_uc_status;
log4kmw::Logger<log4kmw_records::rec_rfh_status, log4kmw::persistence::memory_mapped_file> log4kmw_loggers::logger_rec_rfh_status;
std::mutex log4kmw_loggers::logger_mutex_rec_rfh_status;
log4kmw::Logger<log4kmw_records::status_all, log4kmw::persistence::memory_mapped_file> log4kmw_loggers::logger_status_all;
std::mutex log4kmw_loggers::logger_mutex_status_all;
 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_CommunicationChanged const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_CommunicationChanged const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_CommunicationChanged const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_InternalErrorChanged const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_InternalErrorChanged const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_InternalErrorChanged const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_ECU_InternalErrorChanged const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_CommunicationChanged const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_CommunicationChanged const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_CommunicationChanged const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_MonitoringStatusChanged const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_MonitoringStatusChanged const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_MonitoringStatusChanged const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::APU_UC_MonitoringStatusChanged const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::BenuzerEingabe const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::BenuzerEingabe const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::BenuzerEingabe const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::BenuzerEingabe const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APUCU_Changed const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APUCU_Changed const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APUCU_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APUCU_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_ECU_Changed const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_ECU_Changed const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_ECU_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_ECU_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN1_Changed const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN1_Changed const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN1_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN1_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN2_Changed const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN2_Changed const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN2_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_APU_FAN2_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_BAG10_Changed const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_BAG10_Changed const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_BAG10_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_BAG10_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_FGR_IO_Platine_Changed const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_FGR_IO_Platine_Changed const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_FGR_IO_Platine_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_FGR_IO_Platine_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_FGR_PowerSupply_Changed const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_FGR_PowerSupply_Changed const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_FGR_PowerSupply_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_FGR_PowerSupply_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_FGR_VideoMatrix_Changed const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_FGR_VideoMatrix_Changed const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_FGR_VideoMatrix_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_FGR_VideoMatrix_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_ZLHV_Changed const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_ZLHV_Changed const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_ZLHV_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_ZLHV_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_ZWL_Ext_Changed const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_ZWL_Ext_Changed const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_ZWL_Ext_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::CAN_ZWL_Ext_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::HS_Changed const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::HS_Changed const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::HS_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::HS_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::IFIS_Status_Changed const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::IFIS_Status_Changed const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::IFIS_Status_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::IFIS_Status_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::MonitorAn const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::MonitorAn const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::MonitorAn const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::MonitorAn const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::MonitorAus const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::MonitorAus const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::MonitorAus const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::MonitorAus const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_AliveStatus_Changed const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_AliveStatus_Changed const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_AliveStatus_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NAV_AliveStatus_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NullstellungLenkwinkel const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NullstellungLenkwinkel const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NullstellungLenkwinkel const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NullstellungLenkwinkel const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_CAN_CommunicationChanged const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_Videosignal_Sync_Changed const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_Videosignal_Sync_Changed const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_Videosignal_Sync_Changed const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::RFH_Videosignal_Sync_Changed const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ResetBetriebsstundenGasfilter const & ev, log4kmw_loggers::logger_apu_ecu_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_ecu_status' invalid (not initialized?)");
 log4kmw_records::apu_ecu_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_ecu_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ResetBetriebsstundenGasfilter const & ev, log4kmw_loggers::logger_apu_uc_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'apu_uc_status' invalid (not initialized?)");
 log4kmw_records::apu_uc_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_apu_uc_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ResetBetriebsstundenGasfilter const & ev, log4kmw_loggers::logger_rec_rfh_status_t & log)
{
 if(!log) throw std::runtime_error("Logger 'rec_rfh_status' invalid (not initialized?)");
 log4kmw_records::rec_rfh_status rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_rec_rfh_status);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ResetBetriebsstundenGasfilter const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

