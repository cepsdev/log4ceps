/* LOG4KMW_STATES.CPP 
   CREATED Wed Nov 25 19:28:32 2015

   GENERATED BY logspec2cpp VERSION 0.3 (c) Krauss-Maffei-Wegmann GmbH & Co. KG. 
   THIS IS A GENERATED FILE. DO NOT MODIFY.
*/


#include "log4kmw_states.hpp"


std::mutex log4kmw_states::global_lock;
log4kmw::State<int> log4kmw_states::APU_ECU_Communication(0);
log4kmw::State<int> log4kmw_states::APU_ECU_InternalError(0);
log4kmw::State<int> log4kmw_states::APU_UC_BoostStatus(1);
log4kmw::State<int> log4kmw_states::APU_UC_Communication(0);
log4kmw::State<int> log4kmw_states::APU_UC_LoadStatus(1);
log4kmw::State<int> log4kmw_states::APU_UC_MonitoringStatus(1);
log4kmw::State<int> log4kmw_states::APU_UC_PCB_Temperature(1);
log4kmw::State<int> log4kmw_states::APU_UC_R_Temperature(0);
log4kmw::State<int> log4kmw_states::APU_UC_Temperature(0);
log4kmw::State<int> log4kmw_states::APU_UC_UnloadStatus(1);
log4kmw::State<int> log4kmw_states::CAN_APUCU(0);
log4kmw::State<int> log4kmw_states::CAN_APU_ECU(0);
log4kmw::State<int> log4kmw_states::CAN_APU_Fan1(0);
log4kmw::State<int> log4kmw_states::CAN_APU_Fan2(0);
log4kmw::State<int> log4kmw_states::CAN_BAG10(0);
log4kmw::State<int> log4kmw_states::CAN_FGR_IO_Platine(0);
log4kmw::State<int> log4kmw_states::CAN_FGR_PowerSupply(0);
log4kmw::State<int> log4kmw_states::CAN_FGR_VideoMatrix(0);
log4kmw::State<int> log4kmw_states::CAN_ZLHV(0);
log4kmw::State<int> log4kmw_states::CAN_ZWL_Ext(0);
log4kmw::State<SI::Quantity<SI::Unit<1,0,-1,0,0,0,0> ,double> > log4kmw_states::CGW_FzGeschwindigkeit(0);
log4kmw::State<SI::Quantity<SI::Unit<1,0,0,0,0,0,0> ,double> > log4kmw_states::CMK_Gesamtkilometer(0);
log4kmw::State<int> log4kmw_states::HS_Stellung(0);
log4kmw::State<int> log4kmw_states::IFISBMSStatus(0);
log4kmw::State<int, double, std::string> log4kmw_states::Monitor_status(0, 0.5, "ok");
log4kmw::State<int> log4kmw_states::NavAliveStatus(0);
log4kmw::State<int> log4kmw_states::RFH_CAN_Communication(0);
log4kmw::State<int> log4kmw_states::RFH_Enable_Relais(0);
log4kmw::State<int> log4kmw_states::RFH_Slider(0);
log4kmw::State<int> log4kmw_states::RFH_Videosignal(0);
log4kmw::State<std::string> log4kmw_states::Time_date("01.01.1970 00:00:00");

void log4kmw_states::write_state_APU_ECU_Communication( log4kmw_states::APU_ECU_Communication_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  APU_ECU_Communication = v;
}

log4kmw_states::APU_ECU_Communication_t   log4kmw_states::read_state_APU_ECU_Communication()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::APU_ECU_Communication;
}
log4kmw_states::APU_ECU_Communication_t   log4kmw_states::read_state_APU_ECU_Communication_no_lock()
{
  return log4kmw_states::APU_ECU_Communication;
}
void log4kmw_states::write_state_APU_ECU_InternalError( log4kmw_states::APU_ECU_InternalError_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  APU_ECU_InternalError = v;
}

log4kmw_states::APU_ECU_InternalError_t   log4kmw_states::read_state_APU_ECU_InternalError()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::APU_ECU_InternalError;
}
log4kmw_states::APU_ECU_InternalError_t   log4kmw_states::read_state_APU_ECU_InternalError_no_lock()
{
  return log4kmw_states::APU_ECU_InternalError;
}
void log4kmw_states::write_state_APU_UC_BoostStatus( log4kmw_states::APU_UC_BoostStatus_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  APU_UC_BoostStatus = v;
}

log4kmw_states::APU_UC_BoostStatus_t   log4kmw_states::read_state_APU_UC_BoostStatus()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::APU_UC_BoostStatus;
}
log4kmw_states::APU_UC_BoostStatus_t   log4kmw_states::read_state_APU_UC_BoostStatus_no_lock()
{
  return log4kmw_states::APU_UC_BoostStatus;
}
void log4kmw_states::write_state_APU_UC_Communication( log4kmw_states::APU_UC_Communication_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  APU_UC_Communication = v;
}

log4kmw_states::APU_UC_Communication_t   log4kmw_states::read_state_APU_UC_Communication()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::APU_UC_Communication;
}
log4kmw_states::APU_UC_Communication_t   log4kmw_states::read_state_APU_UC_Communication_no_lock()
{
  return log4kmw_states::APU_UC_Communication;
}
void log4kmw_states::write_state_APU_UC_LoadStatus( log4kmw_states::APU_UC_LoadStatus_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  APU_UC_LoadStatus = v;
}

log4kmw_states::APU_UC_LoadStatus_t   log4kmw_states::read_state_APU_UC_LoadStatus()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::APU_UC_LoadStatus;
}
log4kmw_states::APU_UC_LoadStatus_t   log4kmw_states::read_state_APU_UC_LoadStatus_no_lock()
{
  return log4kmw_states::APU_UC_LoadStatus;
}
void log4kmw_states::write_state_APU_UC_MonitoringStatus( log4kmw_states::APU_UC_MonitoringStatus_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  APU_UC_MonitoringStatus = v;
}

log4kmw_states::APU_UC_MonitoringStatus_t   log4kmw_states::read_state_APU_UC_MonitoringStatus()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::APU_UC_MonitoringStatus;
}
log4kmw_states::APU_UC_MonitoringStatus_t   log4kmw_states::read_state_APU_UC_MonitoringStatus_no_lock()
{
  return log4kmw_states::APU_UC_MonitoringStatus;
}
void log4kmw_states::write_state_APU_UC_PCB_Temperature( log4kmw_states::APU_UC_PCB_Temperature_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  APU_UC_PCB_Temperature = v;
}

log4kmw_states::APU_UC_PCB_Temperature_t   log4kmw_states::read_state_APU_UC_PCB_Temperature()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::APU_UC_PCB_Temperature;
}
log4kmw_states::APU_UC_PCB_Temperature_t   log4kmw_states::read_state_APU_UC_PCB_Temperature_no_lock()
{
  return log4kmw_states::APU_UC_PCB_Temperature;
}
void log4kmw_states::write_state_APU_UC_R_Temperature( log4kmw_states::APU_UC_R_Temperature_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  APU_UC_R_Temperature = v;
}

log4kmw_states::APU_UC_R_Temperature_t   log4kmw_states::read_state_APU_UC_R_Temperature()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::APU_UC_R_Temperature;
}
log4kmw_states::APU_UC_R_Temperature_t   log4kmw_states::read_state_APU_UC_R_Temperature_no_lock()
{
  return log4kmw_states::APU_UC_R_Temperature;
}
void log4kmw_states::write_state_APU_UC_Temperature( log4kmw_states::APU_UC_Temperature_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  APU_UC_Temperature = v;
}

log4kmw_states::APU_UC_Temperature_t   log4kmw_states::read_state_APU_UC_Temperature()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::APU_UC_Temperature;
}
log4kmw_states::APU_UC_Temperature_t   log4kmw_states::read_state_APU_UC_Temperature_no_lock()
{
  return log4kmw_states::APU_UC_Temperature;
}
void log4kmw_states::write_state_APU_UC_UnloadStatus( log4kmw_states::APU_UC_UnloadStatus_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  APU_UC_UnloadStatus = v;
}

log4kmw_states::APU_UC_UnloadStatus_t   log4kmw_states::read_state_APU_UC_UnloadStatus()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::APU_UC_UnloadStatus;
}
log4kmw_states::APU_UC_UnloadStatus_t   log4kmw_states::read_state_APU_UC_UnloadStatus_no_lock()
{
  return log4kmw_states::APU_UC_UnloadStatus;
}
void log4kmw_states::write_state_CAN_APUCU( log4kmw_states::CAN_APUCU_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  CAN_APUCU = v;
}

log4kmw_states::CAN_APUCU_t   log4kmw_states::read_state_CAN_APUCU()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::CAN_APUCU;
}
log4kmw_states::CAN_APUCU_t   log4kmw_states::read_state_CAN_APUCU_no_lock()
{
  return log4kmw_states::CAN_APUCU;
}
void log4kmw_states::write_state_CAN_APU_ECU( log4kmw_states::CAN_APU_ECU_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  CAN_APU_ECU = v;
}

log4kmw_states::CAN_APU_ECU_t   log4kmw_states::read_state_CAN_APU_ECU()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::CAN_APU_ECU;
}
log4kmw_states::CAN_APU_ECU_t   log4kmw_states::read_state_CAN_APU_ECU_no_lock()
{
  return log4kmw_states::CAN_APU_ECU;
}
void log4kmw_states::write_state_CAN_APU_Fan1( log4kmw_states::CAN_APU_Fan1_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  CAN_APU_Fan1 = v;
}

log4kmw_states::CAN_APU_Fan1_t   log4kmw_states::read_state_CAN_APU_Fan1()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::CAN_APU_Fan1;
}
log4kmw_states::CAN_APU_Fan1_t   log4kmw_states::read_state_CAN_APU_Fan1_no_lock()
{
  return log4kmw_states::CAN_APU_Fan1;
}
void log4kmw_states::write_state_CAN_APU_Fan2( log4kmw_states::CAN_APU_Fan2_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  CAN_APU_Fan2 = v;
}

log4kmw_states::CAN_APU_Fan2_t   log4kmw_states::read_state_CAN_APU_Fan2()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::CAN_APU_Fan2;
}
log4kmw_states::CAN_APU_Fan2_t   log4kmw_states::read_state_CAN_APU_Fan2_no_lock()
{
  return log4kmw_states::CAN_APU_Fan2;
}
void log4kmw_states::write_state_CAN_BAG10( log4kmw_states::CAN_BAG10_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  CAN_BAG10 = v;
}

log4kmw_states::CAN_BAG10_t   log4kmw_states::read_state_CAN_BAG10()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::CAN_BAG10;
}
log4kmw_states::CAN_BAG10_t   log4kmw_states::read_state_CAN_BAG10_no_lock()
{
  return log4kmw_states::CAN_BAG10;
}
void log4kmw_states::write_state_CAN_FGR_IO_Platine( log4kmw_states::CAN_FGR_IO_Platine_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  CAN_FGR_IO_Platine = v;
}

log4kmw_states::CAN_FGR_IO_Platine_t   log4kmw_states::read_state_CAN_FGR_IO_Platine()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::CAN_FGR_IO_Platine;
}
log4kmw_states::CAN_FGR_IO_Platine_t   log4kmw_states::read_state_CAN_FGR_IO_Platine_no_lock()
{
  return log4kmw_states::CAN_FGR_IO_Platine;
}
void log4kmw_states::write_state_CAN_FGR_PowerSupply( log4kmw_states::CAN_FGR_PowerSupply_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  CAN_FGR_PowerSupply = v;
}

log4kmw_states::CAN_FGR_PowerSupply_t   log4kmw_states::read_state_CAN_FGR_PowerSupply()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::CAN_FGR_PowerSupply;
}
log4kmw_states::CAN_FGR_PowerSupply_t   log4kmw_states::read_state_CAN_FGR_PowerSupply_no_lock()
{
  return log4kmw_states::CAN_FGR_PowerSupply;
}
void log4kmw_states::write_state_CAN_FGR_VideoMatrix( log4kmw_states::CAN_FGR_VideoMatrix_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  CAN_FGR_VideoMatrix = v;
}

log4kmw_states::CAN_FGR_VideoMatrix_t   log4kmw_states::read_state_CAN_FGR_VideoMatrix()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::CAN_FGR_VideoMatrix;
}
log4kmw_states::CAN_FGR_VideoMatrix_t   log4kmw_states::read_state_CAN_FGR_VideoMatrix_no_lock()
{
  return log4kmw_states::CAN_FGR_VideoMatrix;
}
void log4kmw_states::write_state_CAN_ZLHV( log4kmw_states::CAN_ZLHV_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  CAN_ZLHV = v;
}

log4kmw_states::CAN_ZLHV_t   log4kmw_states::read_state_CAN_ZLHV()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::CAN_ZLHV;
}
log4kmw_states::CAN_ZLHV_t   log4kmw_states::read_state_CAN_ZLHV_no_lock()
{
  return log4kmw_states::CAN_ZLHV;
}
void log4kmw_states::write_state_CAN_ZWL_Ext( log4kmw_states::CAN_ZWL_Ext_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  CAN_ZWL_Ext = v;
}

log4kmw_states::CAN_ZWL_Ext_t   log4kmw_states::read_state_CAN_ZWL_Ext()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::CAN_ZWL_Ext;
}
log4kmw_states::CAN_ZWL_Ext_t   log4kmw_states::read_state_CAN_ZWL_Ext_no_lock()
{
  return log4kmw_states::CAN_ZWL_Ext;
}
void log4kmw_states::write_state_CGW_FzGeschwindigkeit( log4kmw_states::CGW_FzGeschwindigkeit_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  CGW_FzGeschwindigkeit = v;
}

log4kmw_states::CGW_FzGeschwindigkeit_t   log4kmw_states::read_state_CGW_FzGeschwindigkeit()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::CGW_FzGeschwindigkeit;
}
log4kmw_states::CGW_FzGeschwindigkeit_t   log4kmw_states::read_state_CGW_FzGeschwindigkeit_no_lock()
{
  return log4kmw_states::CGW_FzGeschwindigkeit;
}
void log4kmw_states::write_state_CMK_Gesamtkilometer( log4kmw_states::CMK_Gesamtkilometer_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  CMK_Gesamtkilometer = v;
}

log4kmw_states::CMK_Gesamtkilometer_t   log4kmw_states::read_state_CMK_Gesamtkilometer()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::CMK_Gesamtkilometer;
}
log4kmw_states::CMK_Gesamtkilometer_t   log4kmw_states::read_state_CMK_Gesamtkilometer_no_lock()
{
  return log4kmw_states::CMK_Gesamtkilometer;
}
void log4kmw_states::write_state_HS_Stellung( log4kmw_states::HS_Stellung_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  HS_Stellung = v;
}

log4kmw_states::HS_Stellung_t   log4kmw_states::read_state_HS_Stellung()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::HS_Stellung;
}
log4kmw_states::HS_Stellung_t   log4kmw_states::read_state_HS_Stellung_no_lock()
{
  return log4kmw_states::HS_Stellung;
}
void log4kmw_states::write_state_IFISBMSStatus( log4kmw_states::IFISBMSStatus_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  IFISBMSStatus = v;
}

log4kmw_states::IFISBMSStatus_t   log4kmw_states::read_state_IFISBMSStatus()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::IFISBMSStatus;
}
log4kmw_states::IFISBMSStatus_t   log4kmw_states::read_state_IFISBMSStatus_no_lock()
{
  return log4kmw_states::IFISBMSStatus;
}
void log4kmw_states::write_state_Monitor_status( log4kmw_states::Monitor_status_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  Monitor_status = v;
}

log4kmw_states::Monitor_status_t   log4kmw_states::read_state_Monitor_status()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::Monitor_status;
}
log4kmw_states::Monitor_status_t   log4kmw_states::read_state_Monitor_status_no_lock()
{
  return log4kmw_states::Monitor_status;
}
void log4kmw_states::write_state_NavAliveStatus( log4kmw_states::NavAliveStatus_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  NavAliveStatus = v;
}

log4kmw_states::NavAliveStatus_t   log4kmw_states::read_state_NavAliveStatus()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::NavAliveStatus;
}
log4kmw_states::NavAliveStatus_t   log4kmw_states::read_state_NavAliveStatus_no_lock()
{
  return log4kmw_states::NavAliveStatus;
}
void log4kmw_states::write_state_RFH_CAN_Communication( log4kmw_states::RFH_CAN_Communication_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  RFH_CAN_Communication = v;
}

log4kmw_states::RFH_CAN_Communication_t   log4kmw_states::read_state_RFH_CAN_Communication()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::RFH_CAN_Communication;
}
log4kmw_states::RFH_CAN_Communication_t   log4kmw_states::read_state_RFH_CAN_Communication_no_lock()
{
  return log4kmw_states::RFH_CAN_Communication;
}
void log4kmw_states::write_state_RFH_Enable_Relais( log4kmw_states::RFH_Enable_Relais_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  RFH_Enable_Relais = v;
}

log4kmw_states::RFH_Enable_Relais_t   log4kmw_states::read_state_RFH_Enable_Relais()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::RFH_Enable_Relais;
}
log4kmw_states::RFH_Enable_Relais_t   log4kmw_states::read_state_RFH_Enable_Relais_no_lock()
{
  return log4kmw_states::RFH_Enable_Relais;
}
void log4kmw_states::write_state_RFH_Slider( log4kmw_states::RFH_Slider_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  RFH_Slider = v;
}

log4kmw_states::RFH_Slider_t   log4kmw_states::read_state_RFH_Slider()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::RFH_Slider;
}
log4kmw_states::RFH_Slider_t   log4kmw_states::read_state_RFH_Slider_no_lock()
{
  return log4kmw_states::RFH_Slider;
}
void log4kmw_states::write_state_RFH_Videosignal( log4kmw_states::RFH_Videosignal_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  RFH_Videosignal = v;
}

log4kmw_states::RFH_Videosignal_t   log4kmw_states::read_state_RFH_Videosignal()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::RFH_Videosignal;
}
log4kmw_states::RFH_Videosignal_t   log4kmw_states::read_state_RFH_Videosignal_no_lock()
{
  return log4kmw_states::RFH_Videosignal;
}
void log4kmw_states::write_state_Time_date( log4kmw_states::Time_date_t const & v)
{
  std::unique_lock<std::mutex> lock(global_lock);
  Time_date = v;
}

log4kmw_states::Time_date_t   log4kmw_states::read_state_Time_date()
{
  std::unique_lock<std::mutex> lock(global_lock);
  return log4kmw_states::Time_date;
}
log4kmw_states::Time_date_t   log4kmw_states::read_state_Time_date_no_lock()
{
  return log4kmw_states::Time_date;
}
