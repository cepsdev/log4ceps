/* LOG4KMW_LOGGERS.CPP 
   CREATED Tue Mar 29 10:36:29 2016

   GENERATED BY logspec2cpp VERSION 0.3 (c) Krauss-Maffei-Wegmann GmbH & Co. KG. 
   THIS IS A GENERATED FILE. DO NOT MODIFY.
*/



#include "log4kmw_records.hpp"
#include "log4kmw_loggers.hpp"

log4kmw::Logger<log4kmw_records::abc, log4kmw::persistence::memory_mapped_file> log4kmw_loggers::logger_abc;
std::mutex log4kmw_loggers::logger_mutex_abc;
log4kmw::Logger<log4kmw_records::def, log4kmw::persistence::memory_mapped_file> log4kmw_loggers::logger_def;
std::mutex log4kmw_loggers::logger_mutex_def;
log4kmw::Logger<log4kmw_records::status_all, log4kmw::persistence::memory_mapped_file> log4kmw_loggers::logger_status_all;
std::mutex log4kmw_loggers::logger_mutex_status_all;
log4kmw::Logger<log4kmw_records::record2, log4kmw::persistence::memory_mapped_file> log4kmw_loggers::logger_record2;
std::mutex log4kmw_loggers::logger_mutex_record2;
 void log4kmw_loggers::log_event(log4kmw_events::BenuzerEingabe const & ev, log4kmw_loggers::logger_abc_t & log)
{
 if(!log) throw std::runtime_error("Logger 'abc' invalid (not initialized?)");
 log4kmw_records::abc rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_abc);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::BenuzerEingabe const & ev, log4kmw_loggers::logger_def_t & log)
{
 if(!log) throw std::runtime_error("Logger 'def' invalid (not initialized?)");
 log4kmw_records::def rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_def);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::BenuzerEingabe const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::BenuzerEingabe const & ev, log4kmw_loggers::logger_record2_t & log)
{
 if(!log) throw std::runtime_error("Logger 'record2' invalid (not initialized?)");
 log4kmw_records::record2 rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_record2);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::MonitorAn const & ev, log4kmw_loggers::logger_abc_t & log)
{
 if(!log) throw std::runtime_error("Logger 'abc' invalid (not initialized?)");
 log4kmw_records::abc rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_abc);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::MonitorAn const & ev, log4kmw_loggers::logger_def_t & log)
{
 if(!log) throw std::runtime_error("Logger 'def' invalid (not initialized?)");
 log4kmw_records::def rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_def);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::MonitorAn const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::MonitorAn const & ev, log4kmw_loggers::logger_record2_t & log)
{
 if(!log) throw std::runtime_error("Logger 'record2' invalid (not initialized?)");
 log4kmw_records::record2 rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_record2);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::MonitorAus const & ev, log4kmw_loggers::logger_abc_t & log)
{
 if(!log) throw std::runtime_error("Logger 'abc' invalid (not initialized?)");
 log4kmw_records::abc rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_abc);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::MonitorAus const & ev, log4kmw_loggers::logger_def_t & log)
{
 if(!log) throw std::runtime_error("Logger 'def' invalid (not initialized?)");
 log4kmw_records::def rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_def);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::MonitorAus const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::MonitorAus const & ev, log4kmw_loggers::logger_record2_t & log)
{
 if(!log) throw std::runtime_error("Logger 'record2' invalid (not initialized?)");
 log4kmw_records::record2 rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_record2);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NullstellungLenkwinkel const & ev, log4kmw_loggers::logger_abc_t & log)
{
 if(!log) throw std::runtime_error("Logger 'abc' invalid (not initialized?)");
 log4kmw_records::abc rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_abc);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NullstellungLenkwinkel const & ev, log4kmw_loggers::logger_def_t & log)
{
 if(!log) throw std::runtime_error("Logger 'def' invalid (not initialized?)");
 log4kmw_records::def rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_def);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NullstellungLenkwinkel const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::NullstellungLenkwinkel const & ev, log4kmw_loggers::logger_record2_t & log)
{
 if(!log) throw std::runtime_error("Logger 'record2' invalid (not initialized?)");
 log4kmw_records::record2 rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_record2);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ResetBetriebsstundenGasfilter const & ev, log4kmw_loggers::logger_abc_t & log)
{
 if(!log) throw std::runtime_error("Logger 'abc' invalid (not initialized?)");
 log4kmw_records::abc rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_abc);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ResetBetriebsstundenGasfilter const & ev, log4kmw_loggers::logger_def_t & log)
{
 if(!log) throw std::runtime_error("Logger 'def' invalid (not initialized?)");
 log4kmw_records::def rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_def);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ResetBetriebsstundenGasfilter const & ev, log4kmw_loggers::logger_status_all_t & log)
{
 if(!log) throw std::runtime_error("Logger 'status_all' invalid (not initialized?)");
 log4kmw_records::status_all rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_status_all);
  log.append(rec);
 }
}

 void log4kmw_loggers::log_event(log4kmw_events::ResetBetriebsstundenGasfilter const & ev, log4kmw_loggers::logger_record2_t & log)
{
 if(!log) throw std::runtime_error("Logger 'record2' invalid (not initialized?)");
 log4kmw_records::record2 rec;
 log4kmw_records::make_record_from_states(rec);
 {
  std::unique_lock<std::mutex> lock(log4kmw_loggers::logger_mutex_record2);
  log.append(rec);
 }
}

